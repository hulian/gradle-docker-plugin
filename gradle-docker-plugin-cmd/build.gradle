pluginBundle {
    website = 'https://github.com/hulian/gradle-docker-plugin'
    vcsUrl = 'https://github.com/hulian/gradle-docker-plugin'
    description = 'This plugin use local machine shell to execute docker command to complete common tasks like build docker image, push to local or remore registry, deploy to local or remote host'
    tags = ['docker', 'ssh', 'deploy']
    pluginTags = [
        cmdPlugin: ['docker', 'ssh', 'deploy'],
    ]
}

gradlePlugin {
    // Define the plugin
    plugins {
        cmdPlugin {
            displayName = 'gradle-docker-plugin'
            id = 'pub.techfun.docker.plugin.cmd'
            implementationClass = 'pub.techfun.docker.plugin.cmd.DockerPluginCmd'
        }
    }
}

// Add a source set for the functional test suite
sourceSets {
    functionalTest {
    }
}

dependencies {
    compileOnly project(':gradle-docker-plugin-common')
    testImplementation project(':gradle-docker-plugin-common')
}

jar {
    from {configurations.testRuntimeClasspath.collect { it.isDirectory() ? it : zipTree(it) }}
            .include(
                    "META-INF/MANIFEST.MF", "META-INF/gradle-plugins/pub*",
                    "/docker/**", "pub/techfun/**"
            ).duplicatesStrategy(DuplicatesStrategy.EXCLUDE)
}

gradlePlugin.testSourceSets(sourceSets.functionalTest)
configurations.functionalTestImplementation.extendsFrom(configurations.testImplementation)

// Add a task to run the functional tests
tasks.register('functionalTest', Test) {
    testClassesDirs = sourceSets.functionalTest.output.classesDirs
    classpath = sourceSets.functionalTest.runtimeClasspath
    useJUnitPlatform()
}

tasks.named('check') {
    // Run the functional tests as part of `check`
    dependsOn(tasks.functionalTest)
}

tasks.named('test') {
    // Use JUnit Platform for unit tests.
    useJUnitPlatform()
}

task copyToDist {
    doLast {
        copy {
            from "build/libs/$project.name-${project.version}.jar"
            into "../dist"
        }
    }
}
build.finalizedBy(copyToDist)

